//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMaxHealthPoint;

    public static Entitas.IMatcher<GameEntity> MaxHealthPoint {
        get {
            if (_matcherMaxHealthPoint == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MaxHealthPoint);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMaxHealthPoint = matcher;
            }

            return _matcherMaxHealthPoint;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public TestECS.Gameplay.Features.EffectApplication.Lifetime.LifetimeComponents.MaxHealthPoint maxHealthPoint { get { return (TestECS.Gameplay.Features.EffectApplication.Lifetime.LifetimeComponents.MaxHealthPoint)GetComponent(GameComponentsLookup.MaxHealthPoint); } }
    public float MaxHealthPoint { get { return maxHealthPoint.Value; } }
    public bool hasMaxHealthPoint { get { return HasComponent(GameComponentsLookup.MaxHealthPoint); } }

    public GameEntity AddMaxHealthPoint(float newValue) {
        var index = GameComponentsLookup.MaxHealthPoint;
        var component = (TestECS.Gameplay.Features.EffectApplication.Lifetime.LifetimeComponents.MaxHealthPoint)CreateComponent(index, typeof(TestECS.Gameplay.Features.EffectApplication.Lifetime.LifetimeComponents.MaxHealthPoint));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceMaxHealthPoint(float newValue) {
        var index = GameComponentsLookup.MaxHealthPoint;
        var component = (TestECS.Gameplay.Features.EffectApplication.Lifetime.LifetimeComponents.MaxHealthPoint)CreateComponent(index, typeof(TestECS.Gameplay.Features.EffectApplication.Lifetime.LifetimeComponents.MaxHealthPoint));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveMaxHealthPoint() {
        RemoveComponent(GameComponentsLookup.MaxHealthPoint);
        return this;
    }
}
